ext_if="ixl0"

####### Ports Configurations #######
ssh_port="{ 2264 }"
mysql_port="{ 3306 }"
game_ports="{ 10000, 10001, 11002, 13010, 13011, 13020, 13021, 13030, 13031, 13040, 13041, 13099, 30064 30066, 30068, 30070, 30072, 30074, 30076, 30078, 30080, 30082, 30084, 30086, 30088, 30090, 30092, 30094, 30096, 30098, 30100, 30102, 30104, 30106, 30108, 30110, 30112, 30114, 30116, 30118, 30120, 30122, 30124, 30126, 30128, 30130, 30132 }"
p2p_ports="{ 15000, 30051, 30053, 30055, 30057, 30059, 30061, 30063, 30065, 30067, 30069, 30071, 30073, 30075, 30077, 30079, 30081, 30083, 30085, 30087, 30089, 30091, 30093, 30095, 30097, 30099, 30101, 30103, 30105, 30107, 30109, 30111, 30113, 30115, 30117, 30119, 30121, 30123, 30125, 30127, 30129, 30131, 30133 }"
auth_ports="{ 30052, 30054, 30056, 30058, 30060, 30062 }"
db_port="{ 15000, 30051 }"
http_server="{ 32511 }"
denied_ports="{ 32511, 2264 }"
icmp_types="{ echoreq, unreach }"
srv_port_out="{ 80, 443, 2264, 53 }"

############ Tables set ############
table <trusted_hosts> persist
table <abusive_hosts> persist
table <permanent_allowed> persist file "/pf/IPs/allowed.txt"
table <permanent_banned> persist file "/pf/IPs/banned.txt"
table <mysql_allow> persist file "/pf/IPs/mysql.txt"
table <asia> persist file "/pf/IPs/tables/asia.txt"
table <frantech> persist file "/pf/IPs/tables/frantech.txt"
table <ovh> persist file "/pf/IPs/tables/ovh.txt"
freebsdrepo="{last.public.ovh.rtm.snap.mirrors.ovh.net,last-public-ovh-metrics.snap.mirrors.ovh.net,freebsd.org,FreeBSD.org,vuxml.freebsd.org,pkg.FreeBSD.org}"

### Basic Options
set skip on lo0
set block-policy drop
set loginterface $ext_if
set optimization aggressive
set limit { states 10000000, frags 20000, src-nodes 100000, table-entries 1000000 }

### Normalize traffic
scrub in on $ext_if all fragment reassemble
scrub on $ext_if reassemble tcp no-df random-id
scrub out all

### Block anything coming from sources that we have no back routes for.
block in from no-route to any

### Block packets that fail a reverse path check. we look up the routing,
### table, check to make sure that the outbound is the same as the source,
### it came in on. if not, it is probably source address spoofed.
block in from urpf-failed to any

### Drop broadcast requests quietly.
block in quick on $ext_if from any to 255.255.255.255

### Block packets claiming to come from reserved internal address blocks, as
### they are obviously forged and cannot be contacted from the outside world.
block in log quick on $ext_if from { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 255.255.255.255/32 } to any

### Antispoof
antispoof for $ext_if

### Rules
#block by defaut
block all

### block probes that can possibly determine our operating system by disallowing
### certain combinations that are commonly used by nmap, queso and xprobe2, who
### are attempting to fingerprint the server.
### * F : FIN  - Finish; end of session
### * S : SYN  - Synchronize; indicates request to start session
### * R : RST  - Reset; drop a connection
### * P : PUSH - Push; packet is sent immediately
### * A : ACK  - Acknowledgement
### * U : URG  - Urgent
### * E : ECE  - Explicit Congestion Notification Echo
### * W : CWR  - Congestion Window Reduced
block in quick on $ext_if proto tcp flags FUP/WEUAPRSF
block in quick on $ext_if proto tcp flags WEUAPRSF/WEUAPRSF
block in quick on $ext_if proto tcp flags SRAFU/WEUAPRSF
block in quick on $ext_if proto tcp flags /WEUAPRSF
block in quick on $ext_if proto tcp flags SR/SR
block in quick on $ext_if proto tcp flags SF/SF
### keep state on any outbound tcp, udp or icmp traffic. modulate the isn of
### outgoing packets. (initial sequence number) broken operating systems
### sometimes don't randomize this number, making it guessable.
pass out on $ext_if proto { tcp, udp, icmp } from any to any modulate state

############## Web Configurations ##############
pass in quick proto tcp from <WebsiteAllowed> to any port $mysql_port

############# MYSQL Configurations #############
pass in quick proto tcp from <mysql_allow> to any port $mysql_port

############# Local Configurations #############
pass in quick proto udp from 127.0.0.1 to any port $p2p_ports
pass in quick proto tcp from 127.0.0.1 to any port $mysql_port
block in quick proto udp to any port $p2p_ports
block in quick proto tcp to any port $mysql_port

############## SSH Configurations ##############
pass in log on $ext_if proto tcp to 57.128.102.42 port $ssh_port

############ We know its good ############
pass in quick proto tcp from <permanent_allowed> to any

############ Malicious Behaviour ############
block in quick proto tcp from <ovh> to any port $denied_ports
block in quick proto tcp from <frantech> to any port $denied_ports
block in quick proto tcp from <asia> to any port $denied_ports

############ Banning configurations ############
block in quick proto tcp from <permanent_banned> to any
block in quick from <abusive_hosts>
pass in quick from <trusted_hosts>
block in quick proto tcp to any port $auth_ports
block in quick proto tcp to any port $game_ports
pass in quick proto tcp to any port $http_server

########## RateLimiting Configurations ##########
pass in on $ext_if proto tcp to any port $game_ports flags S/SA keep state (max-src-conn 7, max-src-conn-rate 7/3, overload <abusive_hosts> flush)
pass in on $ext_if proto tcp to any port $ssh_port flags S/SA keep state (max-src-conn 12, max-src-conn-rate 7/2, overload <abusive_hosts> flush)
pass in on $ext_if proto tcp to any port $auth_ports flags S/SA keep state (max-src-conn 3, max-src-conn-rate 3/2, overload <abusive_hosts> flush)

### Allow traffic out
pass out inet proto {tcp, udp} from 57.128.102.42 to any port $srv_port_out

### ICMP Rules
# Allow ICMP
# pass log inet proto icmp all icmp-type $icmp_types keep state
# Disable ICMPs
block in on $ext_if inet proto icmp all
